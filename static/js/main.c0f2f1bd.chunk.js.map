{"version":3,"sources":["Components/Statistics/Statistics.jsx","Components/FeedbackOptions/FeedbackOptions.jsx","Components/Section/Section.jsx","Components/Notification/Notification.jsx","Components/Time/Time.jsx","Components/App/App.jsx","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","prototype","PropTypes","number","stile1","textTransform","FeedbackOptions","options","handleClick","style","name","onClick","string","func","Section","title","children","element","Notification","message","Time","state","clickFeed","evt","setState","prevState","target","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","totalFeed","this","posPer","Object","keys","map","key","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAEMA,EAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACE,8FACA,+BACE,6EAAaJ,KACb,qGAAiBC,KACjB,uEAAYC,KACZ,wCAAWC,KACD,IAATH,GACC,wCAEGI,EAFH,cASVL,EAAWM,UAAY,CACrBL,KAAMM,IAAUC,OAChBN,QAASK,IAAUC,OACnBL,IAAKI,IAAUC,OACfJ,MAAOG,IAAUC,OACjBH,mBAAoBE,IAAUC,QAEjBR,QCzBTS,EAAS,CAAEC,cAAe,aAE1BC,EAAkB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,YAClC,OACE,6BACE,6BACE,wBAAQC,MAAOL,EAAQM,KAAMH,EAASI,QAASH,EAA/C,SACGD,SAiBXD,EAAgBL,UAAY,CAC1BM,QAASL,IAAUU,OACnBJ,YAAaN,IAAUW,MAGVP,QC9BTQ,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,qCACE,6BAAKD,IACJC,MAIPF,EAAQb,UAAY,CAClBc,MAAOb,IAAUU,OACjBI,SAAUd,IAAUe,SAEPH,QCZTI,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,6BAAKA,KAEdD,EAAajB,UAAY,CACvBkB,QAASjB,IAAUU,QAENM,QCHFE,EAAb,4MACEC,MAAQ,CACNzB,KAAM,EACNC,QAAS,EACTC,IAAK,GAJT,EAOEwB,UAAY,SAACC,GAEX,EAAKC,UAAS,SAACC,GACb,OAAO,eAAGF,EAAIG,OAAOhB,KAAOe,EAAUF,EAAIG,OAAOhB,MAAQ,OAV/D,EAyBEiB,mBAAqB,WACnB,OAAO,EAAKN,MAAMzB,KAAO,EAAKyB,MAAMxB,QAAU,EAAKwB,MAAMvB,KA1B7D,EA4BE8B,gCAAkC,WAChC,OAAOC,KAAKC,MAAyB,IAAlB,EAAKT,MAAMzB,KAAc,EAAK+B,uBA7BrD,4CAgCE,WAAU,IAAD,OACDI,EAAYC,KAAKL,qBACjBM,EAASD,KAAKJ,kCAEpB,OACE,8BACE,eAAC,EAAD,CAASb,MAAO,+IAAhB,UACGmB,OAAOC,KAAKH,KAAKX,OAAOe,KAAI,SAACC,GAAD,OAC3B,cAAC,EAAD,CAEE9B,QAAS8B,EACT7B,YAAa,EAAKc,WAFbe,MAKM,IAAdN,GAAmB,cAAC,EAAD,CAAcZ,QAAQ,yBAC3B,IAAdY,GACC,cAAC,EAAD,CACEnC,KAAMoC,KAAKX,MAAMzB,KACjBC,QAASmC,KAAKX,MAAMxB,QACpBC,IAAKkC,KAAKX,MAAMvB,IAChBC,MAAOgC,EACP/B,mBAAoBiC,aArDlC,GAA0BK,aA8DXlB,ICzDAmB,EAPI,WACjB,OACE,mCACE,cAAC,EAAD,O,MCANC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c0f2f1bd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <>\r\n      <h2>Статистика</h2>\r\n      <ul>\r\n        <li>Хороший:{good}</li>\r\n        <li>Нейтральный:{neutral}</li>\r\n        <li>Плохой:{bad}</li>\r\n        <li>Total:{total}</li>\r\n        {good !== 0 && (\r\n          <li>\r\n            Goods:\r\n            {positivePercentage}%\r\n          </li>\r\n        )}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\nStatistics.prototype = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positivePercentage: PropTypes.number,\r\n};\r\nexport default Statistics;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst stile1 = { textTransform: \"uppercase\" };\r\n\r\nconst FeedbackOptions = ({ options, handleClick }) => {\r\n  return (\r\n    <ul>\r\n      <li>\r\n        <button style={stile1} name={options} onClick={handleClick}>\r\n          {options}\r\n        </button>\r\n      </li>\r\n      {/* <li>\r\n        <button name=\"neutral\" onClick={handleClick}>\r\n          Нейтральный\r\n        </button>\r\n      </li>\r\n      <li>\r\n        <button name=\"bad\" onClick={handleClick}>\r\n          Плохой\r\n        </button>\r\n      </li> */}\r\n    </ul>\r\n  );\r\n};\r\n\r\nFeedbackOptions.prototype = {\r\n  options: PropTypes.string,\r\n  handleClick: PropTypes.func,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </>\r\n  );\r\n};\r\nSection.prototype = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.element,\r\n};\r\nexport default Section;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst Notification = ({ message }) => {\r\n  return <h1>{message}</h1>;\r\n};\r\nNotification.prototype = {\r\n  message: PropTypes.string,\r\n};\r\nexport default Notification;\r\n","import React, { Component } from \"react\";\r\nimport Statistics from \"../Statistics/Statistics\";\r\nimport FeedbackOptions from \"../FeedbackOptions/FeedbackOptions\";\r\nimport Section from \"../Section/Section\";\r\nimport Notification from \"../Notification/Notification\";\r\nexport class Time extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  clickFeed = (evt) => {\r\n    // console.log(evt.target.name);\r\n    this.setState((prevState) => {\r\n      return { [evt.target.name]: prevState[evt.target.name] + 1 };\r\n    });\r\n  };\r\n\r\n  // neutralClickFeed = () => {\r\n  //   this.setState((prevState) => {\r\n  //     return { neutral: prevState.neutral + 1 };\r\n  //   });\r\n  // };\r\n  // badClickFeed = () => {\r\n  //   this.setState((prevState) => {\r\n  //     return { bad: prevState.bad + 1 };\r\n  //   });\r\n  // };\r\n\r\n  countTotalFeedback = () => {\r\n    return this.state.good + this.state.neutral + this.state.bad;\r\n  };\r\n  countPositiveFeedbackPercentage = () => {\r\n    return Math.round((this.state.good * 100) / this.countTotalFeedback());\r\n  };\r\n\r\n  render() {\r\n    const totalFeed = this.countTotalFeedback();\r\n    const posPer = this.countPositiveFeedbackPercentage();\r\n\r\n    return (\r\n      <div>\r\n        <Section title={\"Пожалуйста оставьте отзыв\"}>\r\n          {Object.keys(this.state).map((key) => (\r\n            <FeedbackOptions\r\n              key={key}\r\n              options={key}\r\n              handleClick={this.clickFeed}\r\n            />\r\n          ))}\r\n          {totalFeed === 0 && <Notification message=\"There is no feedback\" />}\r\n          {totalFeed !== 0 && (\r\n            <Statistics\r\n              good={this.state.good}\r\n              neutral={this.state.neutral}\r\n              bad={this.state.bad}\r\n              total={totalFeed}\r\n              positivePercentage={posPer}\r\n            />\r\n          )}\r\n        </Section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Time;\r\n","import React from \"react\";\r\nimport Time from \"../Time/Time\";\r\n\r\nexport const App = () => {\r\n  return (\r\n    <>\r\n      <Time />\r\n    </>\r\n  );\r\n};\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App/App\";\nimport \"reset-css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}